//@version=5
strategy("iFVG + CISD NY Session Strategy", overlay=true, margin_long=100, margin_short=100)

// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ INPUTS â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
tf          = input.timeframe("5", "Entry Timeframe")
rr          = input.float(1.0, "Risk/Reward", step=0.1)
stopBuffer  = input.int(10, "Stop Buffer (points)")
contractSize = input.float(1.0, "Contract Size (Micro)", minval=0.1)
// New: Threshold for when to switch to fixed 40-point SL/TP
maxDynamicSLPoints = input.int(50, "Max Dynamic SL Points", minval=1)
fixedSLPoints      = input.int(40, "Fixed SL/TP Points (if > Max Dynamic SL)", minval=1)
useLongs    = input.bool(true, "Enable Longs")
useShorts   = input.bool(true, "Enable Shorts")
showFVG     = input.bool(true, "Show FVG Boxes?")
showCISD    = input.bool(true, "Show CISD Lines?")


// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ SOURCE DATA â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
open_tf     = request.security(syminfo.tickerid, tf, open)
high_tf     = request.security(syminfo.tickerid, tf, high)
low_tf      = request.security(syminfo.tickerid, tf, low)
close_tf    = request.security(syminfo.tickerid, tf, close)

// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ SESSIONS â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
// Trade session for entries (9:30 AM â€“ 4:00 PM EST)
inTradeSession = time(timeframe.period, "0930-1200", "America/New_York")
// CISD visualization session (8:00 AM EST onwards)
inCisdVisualSession = time(timeframe.period, "0800-1200", "America/New_York")

// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ FVG DETECTION & INVERSION LOGIC â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
bullishFVG = low_tf[1] > high_tf[3]
bearishFVG = high_tf[1] < low_tf[3]

// Store FVG levels when they form
var float lastBullishFvgLow = na
var float lastBearishFvgHigh = na

if bullishFVG
    lastBullishFvgLow := low_tf[1]
    
if bearishFVG
    lastBearishFvgHigh := high_tf[1]

// Check for FVG inversion
bullishFvgInverted = close_tf < lastBullishFvgLow
bearishFvgInverted = close_tf > lastBearishFvgHigh

// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ CISD ZONES â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
var float cisdLongLevel = na
var float cisdShortLevel = na

// Bullish CISD: first green candle in a sequence
isBullishCandle = close_tf > open_tf
isBullishSeriesStart = isBullishCandle and isBullishCandle[1] and not isBullishCandle[2]
if isBullishSeriesStart
    cisdLongLevel := math.min(open_tf[1], close_tf[1])

// Bearish CISD: first red candle in a sequence
isBearishCandle = close_tf < open_tf
isBearishSeriesStart = isBearishCandle and isBearishCandle[1] and not isBearishCandle[2]
if isBearishSeriesStart
    cisdShortLevel := math.max(open_tf[1], close_tf[1])

// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ TRADES â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
// FIX: Only allow entry if no position is currently open
canEnter = strategy.opentrades == 0

// Reset the daily trade counter (since the code you sent included it)
var int tradesTakenToday = 0
isNewDay = dayofmonth != dayofmonth[1]
if isNewDay
    tradesTakenToday := 0 // Reset the trade counter at the start of each day


if inTradeSession and canEnter and tradesTakenToday < 1
    
    // --- Short Entry Logic ---
    if bullishFvgInverted and close_tf < cisdShortLevel and useShorts
        entry = close_tf
        stop_calc = high_tf[1] + stopBuffer
        
        // Calculate dynamic SL in points
        sl_points = (stop_calc - entry) / syminfo.mintick
        
        final_stop = stop_calc // Default to dynamic stop
        final_target = entry - (stop_calc - entry) * rr // Default to dynamic target
        
        // ðŸš¨ CONDITIONAL SL/TP LOGIC ðŸš¨
        if sl_points > maxDynamicSLPoints
            // If dynamic SL is too big (> 50 points), cap SL/TP at 40 points (1R)
            final_stop = entry + fixedSLPoints * syminfo.mintick
            final_target = entry - fixedSLPoints * syminfo.mintick
        
        strategy.entry("Short", strategy.short, qty=contractSize, comment="iFVG Short")
        strategy.exit("TP/SL", "Short", stop=final_stop, limit=final_target)
        tradesTakenToday := tradesTakenToday + 1
        
    // --- Long Entry Logic ---
    if bearishFvgInverted and close_tf > cisdLongLevel and useLongs
        entry = close_tf
        stop_calc = low_tf[1] - stopBuffer
        
        // Calculate dynamic SL in points
        sl_points = (entry - stop_calc) / syminfo.mintick
        
        final_stop = stop_calc // Default to dynamic stop
        final_target = entry + (entry - stop_calc) * rr // Default to dynamic target

        // ðŸš¨ CONDITIONAL SL/TP LOGIC ðŸš¨
        if sl_points > maxDynamicSLPoints
            // If dynamic SL is too big (> 50 points), cap SL/TP at 40 points (1R)
            final_stop = entry - fixedSLPoints * syminfo.mintick
            final_target = entry + fixedSLPoints * syminfo.mintick

        strategy.entry("Long", strategy.long, qty = contractSize, comment="iFVG Long")
        strategy.exit("TP/SL", "Long", stop=final_stop, limit=final_target)
        tradesTakenToday := tradesTakenToday + 1


// FIX: Close all open positions at the end of the session to prevent indefinite trades.
isAfterTradeSession = time(timeframe.period, "1605-1610", "America/New_York")
if isAfterTradeSession and strategy.opentrades > 0
    strategy.close_all(comment="End of Session Close")


// â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ VISUALIZATION â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
// FVG BOXES
if showFVG and bullishFVG
    box.new(bar_index-3, high_tf[3], bar_index-1, low_tf[1], border_color=color.new(color.green, 0), bgcolor=color.new(color.green, 85))
if showFVG and bearishFVG
    box.new(bar_index-3, high_tf[1], bar_index-1, low_tf[3], border_color=color.new(color.red, 0), bgcolor=color.new(color.red, 85))

// CISD LINES
if showCISD and inCisdVisualSession
    // Draw Bullish CISD line
    if isBullishSeriesStart
        line.new(bar_index-1, cisdLongLevel, bar_index, cisdLongLevel, color=color.blue, width=2)
    // Draw Bearish CISD line
    if isBearishSeriesStart
        line.new(bar_index-1, cisdShortLevel, bar_index, cisdShortLevel, color=color.orange, width=2)
